# Stages (ie phases) that can be used by jobs
stages:
  - build
  - test
  - publish

image: axelor/app-builder:6.1

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

# Add wrapper and caches folders in cache
.global_cache: &global_cache
  paths:
    - .gradle/wrapper
    - .gradle/caches
  policy: pull-push

.global_cache_pull: &global_cache_pull
  <<: *global_cache
  policy: pull

# Build artifacts
build:
  stage: build
  cache:
    - *global_cache
  allow_failure: false
  script:
    - ./gradlew -xtest clean build --refresh-dependencies
  interruptible: true

# Check code formatting
spotless:
  stage: test
  cache:
    - *global_cache_pull
  allow_failure: true
  script:
    - ./gradlew spotlessCheck
  interruptible: true
  only:
    - branches

# Run tests
test:
  stage: test
  cache:
    - *global_cache
  allow_failure: false
  script:
    - ./gradlew test
  interruptible: true
  only:
    - branches
  artifacts:
    expire_in: 31d
    paths:
      - build/reports/jacoco
    reports:
      junit: build/test-results/test/**/TEST-*.xml

.publish_template: &publish_configuration
  stage: publish
  script:
    - ./gradlew clean publish --refresh-dependencies -PaddonsMavenUsername=${NEXUS_ADDONS_DEPLOYMENT_USER} -PaddonsMavenPassword=${NEXUS_ADDONS_DEPLOYMENT_PASSWORD} -P${PUBLISH_TYPE}

publish snapshot:
  <<: *publish_configuration
  variables:
    PUBLISH_TYPE: "snapshotRelease"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH =~ /next-.+/)

publish release:
  <<: *publish_configuration
  variables:
    PUBLISH_TYPE: "finalRelease"
  only:
    - tags

create release:
  stage: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  cache:
    - *global_cache_pull
  allow_failure: true
  only:
    - tags
  script:
    - echo "create release for $CI_COMMIT_TAG"
    - |
      RELEASE_DESCRIPTION=$(sed -n "/^## ${CI_COMMIT_TAG}/,/^## /p" CHANGELOG.md | sed '$d;$d')
      release-cli create --name "$CI_COMMIT_TAG" --description "$RELEASE_DESCRIPTION" --tag-name "$CI_COMMIT_TAG" --ref "$CI_COMMIT_TAG"
